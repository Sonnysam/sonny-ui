#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

const projectRoot = process.cwd();
const configDir = path.join(projectRoot, "config");

function showHelp() {
  console.log(`
üé® Sonny UI Configuration Setup

Usage:
  npx sonny-ui setup [options]

Options:
  -f, --firebase    Setup Firebase configuration
  -s, --supabase    Setup Supabase configuration
  -h, --help        Show this help message

Examples:
  npx sonny-ui setup --firebase     # Setup Firebase
  npx sonny-ui setup --supabase     # Setup Supabase
  npx sonny-ui setup -f -s          # Setup both Firebase and Supabase
`);
}

function createConfigDir() {
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
    console.log("üìÅ Created config directory");
  }
}

function setupFirebase() {
  console.log("üî• Setting up Firebase configuration...");

  try {
    console.log("üì¶ Installing Firebase dependencies...");
    execSync("npm install firebase", { stdio: "inherit", cwd: projectRoot });

    const firebaseConfig = `import { initializeApp, getApps, getApp } from "firebase/app";
import { getAuth, Auth } from "firebase/auth";
import { getFirestore, Firestore } from "firebase/firestore";
import { getStorage, FirebaseStorage } from "firebase/storage";

const firebaseConfig = {
  apiKey: "***",
  authDomain: "***",
  projectId: "***",
  storageBucket: "***",
  messagingSenderId: "***",
  appId: "***",
  measurementId: "***", // Optional
};

let app;
if (!getApps().length) {
  try {
    console.log("Initializing Firebase...");
    app = initializeApp(firebaseConfig);
    console.log("Firebase initialized successfully");
  } catch (error) {
    console.error("Error initializing Firebase:", error);
    throw error;
  }
} else {
  app = getApp();
  console.log("Using existing Firebase app");
}

let auth: Auth, db: Firestore, storage: FirebaseStorage;
try {
  auth = getAuth(app);
  db = getFirestore(app);
  storage = getStorage(app);
  console.log("Firebase services initialized successfully");
} catch (error) {
  console.error("Error initializing Firebase services:", error);
  throw error;
}

export { auth, db, storage };
export default app;
`;

    fs.writeFileSync(path.join(configDir, "firebase.ts"), firebaseConfig);
    console.log("‚úÖ Firebase configuration created at config/firebase.ts");
    console.log(
      "üîß Please update your Firebase credentials in config/firebase.ts"
    );

    return true;
  } catch (error) {
    console.error("‚ùå Error setting up Firebase:", error.message);
    return false;
  }
}

function setupSupabase() {
  console.log("‚ö° Setting up Supabase configuration...");

  try {
    console.log("üì¶ Installing Supabase dependencies...");
    execSync(
      "npm install @supabase/supabase-js @react-native-async-storage/async-storage react-native-url-polyfill",
      {
        stdio: "inherit",
        cwd: projectRoot,
      }
    );

    const supabaseConfig = `import "react-native-url-polyfill/auto";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || "***";
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || "***";

if (!supabaseUrl || supabaseUrl === "***") {
  throw new Error("Missing EXPO_PUBLIC_SUPABASE_URL environment variable");
}

if (!supabaseAnonKey || supabaseAnonKey === "***") {
  throw new Error("Missing EXPO_PUBLIC_SUPABASE_ANON_KEY environment variable");
}

export const supabase = createClient(
  supabaseUrl,
  supabaseAnonKey,
  {
    auth: {
      storage: AsyncStorage,
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false,
    },
  }
);

export default supabase;
`;

    fs.writeFileSync(path.join(configDir, "supabase.ts"), supabaseConfig);
    console.log("‚úÖ Supabase configuration created at config/supabase.ts");
    console.log("üîß Please set your Supabase credentials in your .env file:");
    console.log("   EXPO_PUBLIC_SUPABASE_URL=your_supabase_url");
    console.log("   EXPO_PUBLIC_SUPABASE_ANON_KEY=your_anon_key");

    return true;
  } catch (error) {
    console.error("‚ùå Error setting up Supabase:", error.message);
    return false;
  }
}

function createEnvExample(hasFirebase, hasSupabase) {
  const envExamplePath = path.join(projectRoot, ".env.example");
  let envContent = "";

  if (hasSupabase) {
    envContent += `# Supabase Configuration
EXPO_PUBLIC_SUPABASE_URL=your_supabase_project_url
EXPO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

`;
  }

  if (hasFirebase) {
    envContent += `# Firebase Configuration (if using environment variables)
EXPO_PUBLIC_FIREBASE_API_KEY=your_firebase_api_key
EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=your_firebase_auth_domain
EXPO_PUBLIC_FIREBASE_PROJECT_ID=your_firebase_project_id
EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET=your_firebase_storage_bucket
EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_firebase_messaging_sender_id
EXPO_PUBLIC_FIREBASE_APP_ID=your_firebase_app_id
EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID=your_firebase_measurement_id

`;
  }

  if (envContent && !fs.existsSync(envExamplePath)) {
    fs.writeFileSync(envExamplePath, envContent);
    console.log("üìù Created .env.example file with configuration templates");
  }
}

// Main CLI logic
const args = process.argv.slice(2);
const command = args[0];

if (command === "setup") {
  const flags = args.slice(1);
  const installFirebase = flags.includes("-f") || flags.includes("--firebase");
  const installSupabase = flags.includes("-s") || flags.includes("--supabase");
  const showHelpFlag = flags.includes("-h") || flags.includes("--help");

  if (showHelpFlag) {
    showHelp();
    process.exit(0);
  }

  if (!installFirebase && !installSupabase) {
    console.log(
      "‚ùå Please specify at least one backend option (-f for Firebase, -s for Supabase)"
    );
    showHelp();
    process.exit(1);
  }

  console.log("üöÄ Setting up Sonny UI backend configuration...");
  createConfigDir();

  let firebaseSuccess = false;
  let supabaseSuccess = false;

  if (installFirebase) {
    firebaseSuccess = setupFirebase();
  }

  if (installSupabase) {
    supabaseSuccess = setupSupabase();
  }

  createEnvExample(firebaseSuccess, supabaseSuccess);

  console.log("üéâ Setup complete!");
} else if (command === "help" || command === "--help" || command === "-h") {
  showHelp();
} else {
  console.log('‚ùå Unknown command. Use "setup" to configure backends.');
  showHelp();
  process.exit(1);
}
